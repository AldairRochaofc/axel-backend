generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Plan {
  FREE
  MONTHLY
  ANNUAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

enum LogStatus {
  SUCCESS
  ERROR
  WARNING
}

enum Role {
  USER
  ADMIN
}
model AccessCode {
  id        String   @id @default(uuid())
  code      String   @unique
  plan      Plan
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  password       String
  image          String?
  provider       String?       @db.VarChar(50)
  providerId     String?
  plan           Plan             @default(FREE)
  role           Role             @default(USER)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  isVerified     Boolean          @default(false)
  resetPasswordToken  String?     @unique
  resetPasswordTokenExpires DateTime?

  payments       Payment[]
  emailVerifications EmailVerification[]
  messageUsages  MessageUsage[]

  @@unique([provider, providerId]) 
}
model Payment {
  id                 String        @id @default(uuid())
  userId             String
  externalId         String?       
  status             PaymentStatus @default(PENDING)
  amount             Decimal       @db.Decimal(10, 2)
  currency           String
  paymentMethod      String?
  paymentMethodId    String?
  plan               Plan       
  paymentProvider    String        @default("MERCADOPAGO")
  paymentUrl         String?       
  transactionDetails Json?         
  notificationSent   Boolean       @default(false) 
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  recipient          String?
  cpf                String?  
  payer              Json?

  user               User          @relation(fields: [userId], references: [id])

  @@index([externalId])
}

model EmailNotification {
  id        String       @id @default(uuid())
  recipient String
  subject   String
  content   String       @db.Text
  status    EmailStatus  @default(PENDING)
  sentAt    DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  plan      Plan
}

model EmailVerification {
  id         String   @id @default(uuid())
  code       String   @db.VarChar(6)  
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model EmailVerificationRequest {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  code       String   @db.VarChar(6) 
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model MessageUsage {
  id        String   @id @default(uuid())
  userId    String
  day       Int      
  month     Int     
  year      Int
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, day, month, year])
}
