generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  MONTHLY
  ANNUAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

enum Provider {
  LOCAL
  GOOGLE
  FACEBOOK
  MICROSOFT
}

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  password       String
  image          String?
  provider       Provider         @default(LOCAL)
  providerId     String?
  plan           Plan             @default(FREE)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  interactions   Interaction[]
  preferences    UserPreference[]
  payments       Payment[]
  emailVerifications EmailVerification[]

   @@unique([provider, providerId]) 
}

model Interaction {
  id        String   @id @default(uuid())  
  userId    String  
  input     String  
  response  String  
  timestamp DateTime @default(now())  
  context   Json?  
  user      User     @relation(fields: [userId], references: [id]) 
}

model UserPreference {
  id        String   @id @default(uuid())
  userId    String   @unique
  language  String
  theme     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id                 String        @id @default(uuid())
  userId             String
  externalId         String?       
  status             PaymentStatus @default(PENDING)
  amount             Decimal       @db.Decimal(10, 2)
  paymentMethod      String?
  paymentMethodId    String?       
  paymentProvider    String        @default("STRIPE")
  paymentUrl         String?       
  transactionDetails Json?         
  notificationSent   Boolean       @default(false) 
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  user               User          @relation(fields: [userId], references: [id])

  @@index([externalId])
}

model EmailNotification {
  id        String       @id @default(uuid())
  recipient String
  subject   String
  content   String       @db.Text
  status    EmailStatus  @default(PENDING)
  sentAt    DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model EmailVerification {
  id         String   @id @default(uuid())
  code       String   @db.VarChar(6)  
  expiresAt  DateTime
  contactId  String
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}
